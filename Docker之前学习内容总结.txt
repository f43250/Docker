Docker理解:
    1.Docker是虚拟化容器,他与传统虚拟机的核心区别为:
        虚拟机是硬件级别的虚拟化,Docker是操作系统级别的虚拟化.
    2.使用Docker部署项目对比与传统linux服务器部署相比,有如下几点优势:
        (1)Docker部署项目是秒级启动,传统linux直接部署可能是几十秒甚至耗时更久.
        (2)Docker消耗系统资源非常的少,而传统部署项目的方式消耗系统资源和性能非常大.
        (3)使用Docker可以让我linux环境非常的干净,不需要linux配置很多环境(甚至不需要jdk),当我需要什么环境,
           我就去pull一个.当我不需要它的时候,就将启动这个镜像的容器停止,再删除镜像,整个系统中没有任何的冗余和残留.
        (4)Docker是我学习的SpringCloud微服务的后续配套技术,我还了解到后续对Docker容器集群管理的Kubernates(k8s),
           但由于刚毕业且上家公司离职较早,还没来得及接触,只有后续自己去探索了. (ps:这应该不算优势...)

Docker一些已经熟记不需要百度的操作:
   (1)docker pull "镜像名称" (后面可以带版本和标签) :拉取一个你需要的image
   (2)docker images:查看当前所有镜像
   (3)docker ps:查看当前所有正在运行的容器,加上-a可以查看涵盖没有运行的容器.
   (4)docker stop + "container name" or "container id":停止正在运行的指定容器.
   (5)docker rm + "container name" or "container id" :删除指定容器
   (6)docker rmi + "image name" or "image id" :删除指定镜像(ps:删除镜像前需要先停止删除运行该image的container)
   (7)docker start + "container id" or "container name"启动未运行的指定容器
   (8)docker build(与dockerfile在同一文件夹的情况下):以dockerfile和指定base image编译自己需要的image.
   (9)docker run:将指定image包含在container并启动容器.一些参数:
      1.net=host/bridge/默认 网络模式,主机桥接默认等,可以变向解决docker跨容器通信的问题.
      2.--name 给启动的容器取别名;-p xxxx:nnnn端口映射 xxxx为linux端口,nnnn为docker容器内部端口
      3.-d后台运行,~v目录挂载映射.
   (10)进入docker容器内部文件夹 docker exec -ti bash .

 总结:Docker容器实际上就是一个linux系统.这一点是我当时需要起一个docker的mysql.但pull下来之后需要创建帐号密码
     建库建表改配置等,一下就僵了.然后灵机一动,进入docker容器内部后...mysql -r root -p ..发现原来就是普通的linux..操作.

 近期补充:
    1.之前学习Docker容器的时候就发现了一个问题,假如我所有的项目,服务,数据库等配套的东西都用docker一个一个
      build镜像,run的时候打参数非常的麻烦,但dockerfile好像只是可以写一些启动参数和docker挂载路径等,好像
      并不能解决这个问题.后面就知道了docker-compose

      docker-compose是一个docker容器编排工具,可以解决我之前并行启动的问题,与dockerfile同一目录下,
      建立一个名为docker-compose.yml的文件,然后在其中可以将你这次要启动的所有东西都写进来,但都是基于
      docker image的,例如docker的mysql,docker的redis,docker编译好的java项目image等.
      使用docker-compose up一次性打包启动,非常方便.

 总结(二):这次了解到docker-compose后能解决之前的问题,但也只是跟着教程编写了一个docker-compose.yml,其中细节和dockerfile的编写
         一样,还不是特别熟练,后续还需要多次熟悉.另外很期待后续的kubernates(k8s)的自学.我知道这是一个极大的挑战,不过我自信能够有所搜获.
    